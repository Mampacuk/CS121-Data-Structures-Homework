# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    analysis.txt                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: aisraely <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/11/12 22:02:09 by aisraely          #+#    #+#              #
#    Updated: 2021/11/12 22:02:09 by aisraely         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

ft_tree_nullcount_recursive()
All the member functions called take constant time; the recursive call will be entered
the number of nodes * 2, which is linear in size of the tree

static int	ft_subtree_nullcount(typename IBinaryTree<int*>::IBinaryNode *tree_node)
{																				// PER LINE:
	if (!tree_node)																// O(1)		O(1)
		return (0);																//
	return ((*(*tree_node) == NULL) + ft_subtree_nullcount(tree_node->left())	//*n O(1)	O(n)
		+ ft_subtree_nullcount(tree_node->right()));
}

int	ft_tree_nullcount_recursive(const IBinaryTree<int*> &tree)
{
	return (ft_subtree_nullcount(dynamic_cast<IBinaryTree<int*>::IBinaryNode*>(tree.root())));
																	// O(1) + O(n) => O(n)
}

ft_tree_nullcount_iterative()
This is the breadth-first traversal of the tree: it's a common knowledge it's linnear, because
	1) the ADT used here -- deque -- has all its methods constant ('cept for adding methods
														that are amortized O(1)).
	2) at each iteration we insert from 0 to 2 pointers, and pop one, meaning that
		eventually, if we sum up all the iterations, it'll iterate number of nodes times.

int	ft_tree_nullcount_iterative(const IBinaryTree<int*> &tree)
{
	int										result;
	DynamicArrayDeque<ITree<int*>::Node*>	deque;

	result = 0;
	deque.insertFront(tree.root());
	while (!deque.empty())
	{
		IBinaryTree<int*>::IBinaryNode	*front_node = dynamic_cast<IBinaryTree<int*>::IBinaryNode*>(deque.front());
		if (front_node->left())
			deque.insertBack(front_node->left());
		if (front_node->right())
			deque.insertBack(front_node->right());
		if (*(*front_node) == NULL)
			result++;
		deque.eraseFront();
	}
	return (result);
}															IS LINEAR AF!!!
