# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    analysis.txt                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: aisraely <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/11/11 00:27:31 by aisraely          #+#    #+#              #
#    Updated: 2021/11/11 00:27:31 by aisraely         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

1	template <typename E>
2	List<typename ITree<E>::Node*>	LinkedBinaryTree<E>::Node::grandchildren(void) const
3	{														// PER LINE:	TOTAL:
4		List<typename ITree<E>::Node*>	family;				// 29			29
5															//
6		if (this->_left)									// 3			32
7		{													//
8			if (this->_left->_left)							// 5			37
9				family.insertBack(this->_left->_left);		// 4 + O(1)		41 + O(1)
10			if (this->_left->_right)						// 5			46 + O(1)
11				family.insertBack(this->_left->_right);		// 4 + O(1)		50 + O(1)
12		}													//
13		if (this->_right)									// 3			53 + O(1)
14		{													//
15			if (this->_right->_left)						// 5			58 + O(1)
16				family.insertBack(this->_right->_left);		// 4 + O(1)		62 + O(1)
17			if (this->_right->_right)						// 5			67 + O(1)
18				family.insertBack(this->_right->_right);	// 4 + O(1)		71 + O(1)
19		}													//
20		return (family);									// 1			72 + O(1)
21	}																		which is O(1)
