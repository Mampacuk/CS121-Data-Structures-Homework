# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    analysis.txt                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: aisraely <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/10/25 15:06:09 by aisraely          #+#    #+#              #
#    Updated: 2021/10/26 19:50:52 by aisraely         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Viewing the vector first:

You can recall the complexities of ArrayVector class' member functions in ../ex00/analysis.txt

void	ft_remove_dupes(ArrayVector<int> &vector)			// PER LINE:	TOTAL:
{															where j is the fraction of unique elements of n
	int					i;									// 1			1
	ArrayVector<int>	container;							// 3			4
															//
	if (vector.size() < 2)									// 4			8
		return ;											//
	container.insert(0, vector[0]);							// 29 + 4		33
	i = 1;													// 1			34
	while (i < vector.size())								//*(n + 1) 4	4n + 38	
	{														//
		if (vector[i - 1] != vector[i])						//*n 10			14n + 38
			container.insert(container.size(), vector[i]);	//*n 36			50n + 38
		i++;												//*n 1			51n + 38
	}														//
	while (!vector.empty())									//*(n + 1) 5	56n + 43
		vector.erase(vector.size() - 1);					//*n 5			61n + 43
	i = 0;													// 1			61n + 44
	while (i < container.size())							//*(jn + 1) 4	61n + 4jn + 48
		vector.insert(vector.size(), container[i++]);		//*jn 37		61n + 41jn + 48
}																		=> n(61 + 41j) => n => O(n)

Now, the list:

template <typename D>
List<D>::Iterator::Iterator(Node *node) : _ptr(node) {}	// TOTAL: 1

template <typename D>
List<D>::Iterator::Iterator(const Iterator &copy) : _ptr(copy._ptr) {} // TOTAL: 1

template <typename D>
typename List<D>::Iterator	List<D>::begin(void) const
{
	return (Iterator(this->_header->next));				// TOTAL: 6
}

template <typename D>
typename List<D>::Iterator	List<D>::end(void) const
{
	return (Iterator(this->_trailer));					// TOTAL: 3
}

template <typename D>
int	List<D>::size(void) const
{
	return (this->_n);									// TOTAL: 3
}

template <typename D>
typename List<D>::Iterator	&List<D>::Iterator::operator--(void)
{
	this->_ptr = this->_ptr->prev;						// +7
	return (*this);										// +2, TOTAL: 9
}

template <typename D>
typename List<D>::Iterator	&List<D>::Iterator::operator++(void)
{
	this->_ptr = this->_ptr->next;						// +7
	return (*this);										// +2, TOTAL: 9
}

template <typename D>
D	&List<D>::Iterator::operator*(void)
{
	return (this->_ptr->data);							// TOTAL: 5
}

template <typename D>
bool	List<D>::Iterator::operator!=(const IIterator<D> &p) const
{															// PER LINE:	TOTAL:
	if (typeid(p) != typeid(Iterator))						// 3			3
		throw std::bad_typeid();							//
	const Iterator	&it = dynamic_cast<const Iterator&>(p);	// 3			6
															//
	return (this->_ptr != it._ptr);							// 5			11
}

template <typename D>
void	List<D>::erase(const IIterator<D> &p)
{															// PER LINE:	TOTAL:
	if (typeid(p) != typeid(Iterator))						// 3			3
		throw std::bad_typeid();							//
															//
	const Iterator	&it = dynamic_cast<const Iterator&>(p);	// 3			6
	Node			*it_before = it._ptr->prev;				// 5			11
	Node			*it_after = it._ptr->next;				// 5			16
															//
	it_before->next = it_after;								// 3			19
	it_after->prev = it_before;								// 3			22
	delete it._ptr;											// 2			24
	this->_n--;												// 4			28			
}

void	ft_remove_dupes(List<int> &list)				// PER LINE:			TOTAL:
{														//
	List<int>::Iterator curr = list.begin();			// 8					8
														//
	if (list.size() < 2)								// 4					12
		return ;										//
	while (curr != --list.end())						//*n 16					16n + 12
	{													//
		List<int>::Iterator	curr_copy(curr);			//*(n - 1) 1			17n + 11
		List<int>::Iterator	curr_next(++curr);			//*(n - 1) 9 + 1 = 10	27n + 1
		if (*curr_copy == *curr_next)					//*(n - 1) 11			38n - 10	!! best-case, O(n)
			list.erase(curr_copy);						//*(n - 1) 28			66n - 38	!! worst-case, O(n)
	}													//					=> 66n => n => O(n)
}														//
