# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    analysis.txt                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: aisraely <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/09/26 18:12:26 by aisraely          #+#    #+#              #
#    Updated: 2021/09/27 21:16:49 by aisraely         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

We know `ft_lstadd()` takes 5 operations from the previous analysis in ex03.

But we have to inspect `ft_lstadd_back()` first, meaning `ft_lstlast()` first:

1	template <typename D>
2	s_list<D>	*ft_lstlast(s_list<D> *lst)		// PER LINE:			TOTAL:
3	{											//
4		s_list<D>	*curr;						// +1					1
5												//
6		if (!lst)								// +1					2
7			return (NULL);						//
8		curr = lst;								// +1					3
9		while (curr->next)						// +(n + 1)				n + 4
10			curr = curr->next;					// +n					2n + 4
11		return (curr);							// +1					2n + 5
12	}

1	template <typename D>
2	void	ft_lstadd_back(s_list<D> **lst, s_list<D> *node)	// PER LINE:		TOTAL:
3	{															//
4		s_list<D>	*last;										// +1				1
5																//
6		if (lst && node)										// +2				3
7		{														//
8			if (*lst)											// +2				5
9			{													//
10				last = ft_lstlast(*lst);						// +(ft_lstlast) =	
																// = +(2n + 5)		2n + 10;
11				last->next = node;								// +3				2n + 13
12			}													//
13			else												//
14				*lst = node;									// (best-case) +2
15		}														//					2n + 13 - worst-case, 7 in best-case
16	}

Start from the subroutine, `ft_lstbubble_sort()`:

1	template <typename D>
2	s_list<D>	*ft_lstbubble_sort(s_list<D> **head)	//	PER LINE:					WORST-CASE:			BEST-CASE:
3	{													//		
4		int			swap;								// +1							1					1
5		s_list<D>	*curr;								// +1							2					2
6		D			temp;								// +1							3					3
7														//		
8		if (!head || !(*head))							// +3							4					4
9			return (NULL);								//		
10		swap = 1;										// +1							5					5
11		while (swap)									//*n (worst-case) +1			n + 6				(+2) 7
12		{												//	
13			swap = 0;									//*n +1							2n + 6				8
14			curr = *head;								//*n +2							4n + 6				10
15			while (curr->next)							//*n +3							7n + 6				3n + 10
16			{											//	
17				if (curr->data > curr->next->data)		//*(n*n) +7						7n^2 + 7n + 6 		10n + 10
18				{										//	
19					temp = curr->data;					//*(n*n) +3						10n^2 + 7n + 6	
20					curr->data = curr->next->data;		//*(n*n) +7						17n^2 + 7n + 6	
21					curr->next->data = temp;			//*(n*n) +5						22n^2 + 7n + 6	
22					swap = 1;							//*(n*n) +1						23n^2 + 7n + 6	
23				}										//	
24				curr = curr->next;						//*n +3							23n^2 + 10n + 6		13n + 10
25			}											//	
26		}												//	
27		return (*head);									//								23n^2 + 10n + 7		13n + 11
28	}

1	template <typename D>
2	s_list<D>	*ft_lsthybrid_sort(s_list<D> **head)			// PER LINE:						WORST-CASE:							BEST-CASE:
3	{															//															
4		int			i;											// +1								1									1
5		s_list<D>	*curr;										// +1								2									2
6		s_list<D>	*next_node;									// +1								3									3
7		s_list<D>	*buckets[10000] = {};						// +1								4									4
8																//															
9		if (!head || !(*head))									// +3								7									7
10			return (NULL);										//															
11		curr = *head;											// +2								9									9
12		while (curr)											// +n + 1							n + 10								n + 10
13		{														//															
14			next_node = curr->next;								//*n +3								4n + 10								4n + 10
15			ft_lstadd(&buckets[curr->data / 10000], curr);		//*n 4 + ft_lstadd() = (4 + 5)		13n + 10							13n + 10
16			curr = next_node;									//*n +1								14n + 10							14n + 10
17		}														//
18		i = 0;													// +1								14n + 11							14n + 11 
19		while (i < 10000)										// +10,001							14n + 10,012						14n + 10,012
20		{														//
21			if (buckets[i])										// +10,000							14n + 20,012 						14n + 20,012
22				buckets[i] = ft_lstbubble_sort(&buckets[i]);	// +10,000*ft_lstbubble_sort()		230,000n^2 + 100,014n + 90,012		130,014n + 31,012
23			i++;												// +10,000							230,000n^2 + 100,014n + 100,012		130,014n + 41,012
24		}														//
25		*head = NULL;											// +1								230,000n^2 + 100,014n + 100,013		130,014n + 41,013
26		i = 0;													// +1								230,000n^2 + 100,014n + 100,014		130,014n + 41,014
27		while (i < 10000)										// +10,001							230,000n^2 + 100,014n + 110,015		130,014n + 51,015
28->	ft_lstadd_back(head, buckets[i++]);						//*10,000 +ft_lstadd_back()			230,000n^2 + 120,014n + 123,015		130,014n + 121,015
29		return (*head);											// +1								230,000n^2 + 120,014n + 123,016		130,014n + 121,016
30	}

WORST-CASE:
	230,000n^2 + 120,014n + 123,016 => 230,000n^2 => n^2
BEST-CASE:
	130,014n + 121,016 => 130,014n => n

Thus we conclude that the worst-case scenario of the algorithm is O(n^2), if N is O(n^2) and less,
and the best-case scenario of the algorithm is O(n), if N is O(n) and less.

The worst-case scenario is going occur if we're given a sequence such that each bucket gets
filled with nodes in DESCENDING order. This'll result in bubble sort's worst-case which adds the n^2 term.

The best-case scenario is when each bucket gets filled with nodes that are already sorted. Then the sequence and the buckets
will get traversed once and that's it.

(note that i ft_lstadd() to the buckets instead of ft_lstadd_back() which makes the best- and worst-case interchangeable)

Since we judge by the worst-case runtime, we can conclude that any algorithm whose running time is better than O(n^2)
is better, namely quicksort, merge sort, bucket sort and radix sort (even though the last one poses additional limitations).

P.S.
	notice that on Line 28, even if i hold a tail reference in my structure, i'm not gonna affect the complexity anyhow,
	so please don't reprimand me for that