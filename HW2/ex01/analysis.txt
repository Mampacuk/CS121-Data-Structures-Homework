# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    analysis.txt                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: aisraely <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/09/18 18:31:12 by aisraely          #+#    #+#              #
#    Updated: 2021/09/18 19:07:45 by aisraely         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Let's go line by line, for the function:

1	int	ft_find_step(int *arr, int arr_size)	// PER LINE:														TOTAL:
2	{											//																	0
3		int	i;									// +1																1
4												//
5		i = 0;									// +1																2
6		while (i < arr_size - 1)				// +n comparisons													2 + n
7		{										//
8			if ((arr[i] - arr[i + 1]) % 2 == 0)	//}*(n - 1) "[]": +2; "-": +1; "%": +1; "==": +1 = 5				7(n - 1) + n + 2
9				return (i);						//}*(n - 1) can be joined with `return` on line 12 as 1 operation	7(n - 1) + n + 3
10			i++;								//}*(n - 1) +1														8(n - 1) + n + 3
11		}										//
12		return (-1);							// joined with `return` on line 9									8(n - 1) + n + 3
13	}

Now open up the parentheses:
	8(n - 1) + n + 3 = 8n - 8 + n + 3 = 9n - 5

Now drop the lower term:
	9n - 5 ~ 9n

Drop the leading coefficient:
	9n ~ n

Thus the function is O(n).

Let's go line by line, for the program:

Notice that ft_check_step() is a subroutine which has to be dealt with first:

1	int	ft_check_step(int *arr, int arr_size)				// PER LINE:									TOTAL:
2	{														//			
3		int	i;												// +1											1
4		int	even;											// +1											2
5															//			
6		i = 0;												// +1											3
7		even = 0;											// +1											4
8		while (i < arr_size - 1)							// n											n + 4
9		{													//
10			if (!(arr[i] - arr[i + 1] % 2))					//}*(n - 1) "[]":+2; "-":+1; "%":+1; "!":+1		5(n - 1) + n + 4
11				even++;										//}*(n - 1)	optional; +1 in worst-case			6(n - 1) + n + 4
12			if (even && arr[i] - arr[i + 1] % 2)			//}*(n - 1) +6									12(n - 1) + n + 4
13				return (0);									// merge with return on line 16 into +1			12(n - 1) + n + 5
14			i++;											//}*(n - 1) +1									13(n - 1) + n + 5
15		}													//
16		return (1);											//
17	}														// 13n - 13 + n + 5 = 14n - 8

Now, the main():

1	int	main(void)													// PER LINE:					TOTAL:
2	{																//
3		int	n;														// +1							1
4		int	*arr;													// +1							2
5																	//
6		std::cout << "Input the array size: ";						// +1							3
7		std::cin >> n;												// +2 (read + write)			5
8		if (std::cin.fail() || n < 1)								// +2							7
9		{															// }
10			std::cout << "Invalid input" << std::endl;				// } exceptional case
11			return (1);												// }
12		}															//
13		arr = new int[n];											// +1							8
14		std::cout << "Now, input the elements:" << std::endl;		// +1							9
15		for (int i = 0; i < n; i++)									// init+1; comp+n; inc+(n-1)=2n	2n + 9	
16		{															//
17			std::cin >> arr[i];										//}*n +2 (read + write)			4n + 9
18			if (std::cin.fail())									//}*n +1						5n + 9
19			{														//
20				std::cout << "Invalid input" << std::endl;			//} exceptional...
21				return (1);											//} ...case
22			}
23		}
24		if (!ft_check_step(arr, n))									// +(1 + ft_check_step()) =		
																	// +(1 + 14n - 8)				19n + 7
25		{
26			std::cout << "Invalid input" << std::endl;				//} exceptional...
27			return (1);												//} ...case
28		}
29		std::cout << ft_find_step(arr, n) << std::endl;				// +(1 + ft_find_step()) =
																	// +(1 + 9n - 5)				28n + 3
30	}

Now drop the lower term:
	28n + 3 ~ 28n

Drop the leading coefficient:
	28n ~ n

Thus the program is O(n).